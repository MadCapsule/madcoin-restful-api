{"name":"Madcoin-restful-api","tagline":"Madcoin RestFul API services to control our coins daemons (Bitcoind or Litecoind)","body":"madcoin-python is a set of Python libraries that allows easy access to the bitcoin peer-to-peer cryptocurrency client API throw a Restful API.\r\n\r\nDocumentation\r\n=============\r\n\r\nDocumentation can be found here, or in the source archive. It is built\r\nusing Epydoc:\r\n\r\n[http://epydoc.sourceforge.net/](http://epydoc.sourceforge.net/)\r\n\r\nInstallation instructions\r\n=========================\r\n\r\nIn this repo you will find everything you would need to make it works\r\n\r\nmadcoin-python uses `setuptools` for the install script. There are no dependencies apart from Python itself.\r\n\r\n```\r\n  $ sudo aptitude install python-setuptools\r\n  $ sudo aptitude install python-pip\r\n  $ sudo aptitude install git\r\n```\r\n\r\nInstall the virtual enviroment to start working/run on our project\r\n\r\n```\r\n  $ sudo pip install virtualenv\r\n  $ virtualenv venv\r\n  $ source venv/bin/activate\r\n```\r\n\r\nIf we wanna exit from our virtual enviroment we can run \r\n\r\n```\r\n  $ deactivate\r\n```\r\nWith this command line we can test if our virtual enviroment is working properly \r\n\r\n```\r\n$ which python\r\n/home/israel/Desktop/madcoin-restful-api/madcoin/venv/bin/python\r\n```\r\n\r\nYou can clone the repo using the following command:\r\n\r\n```\r\n  $ git clone git@bitbucket.org:madcapsulemedia/madcoin-restful-api.git\r\n```\r\n\r\nAfter install our virtual enviroment we have to install our dependencies and there are two options to do that:\r\n\r\n## First option\r\n\r\n```\r\n  $ pip install flask #small framework to our python app\r\n  $ pip install uwsgi #this is the server to host our app in production mode\r\n  $ pip install flask-cors #plugin to support CORS on our flasky app\r\n  $ pip install simplejson #lower json controller to handle Decimal Types\r\n  $ pip install -e git://github.com/laanwj/bitcoin-python.git#egg=bitcoin-python #Bitcoin library to comunicate our project with our bitcoind\r\n```\r\n\r\nIf you are having troubles installing bitcoin-python from `git` you can try with this command instead the above:\r\n\r\n```\r\n  $ pip install -e git+https://github.com/laanwj/bitcoin-python.git#egg=bitcoin-python\r\n```\r\n\r\nIf we want to generate the documentation we can run the next line:\r\n\r\n```\r\n  $ pip install epydoc\r\n```\r\n\r\n## Second option\r\n\r\n```\r\n  $ pip install -r requirements.txt\r\n```\r\n\r\nRun instructions\r\n================\r\n\r\n#### In production\r\n\r\nTo run our app we are going to use `uWSGI` using the following command:\r\n\r\n```\r\nuwsgi --socket 0.0.0.0:5000 --wsgi-file run_pro.py --callable app --processes 4 --threads 2 --stats 127.0.0.1:9191 --protocol=http\r\n```\r\n\r\nThat's allow us to access our app on `SERVER_URL:5000` and to access locally to a log JSON file on `127.0.0.1:9191`\r\n\r\n> Is important to notice that for the production enviroment we are using a different `run.py` file that for development porpouse\r\n\r\n#### In developemnt mode\r\n\r\nAfter clone the project go to `madcoin-restful-api/madcoin` folder and set execute rights to the `run.py` script and the execute it\r\n\r\n```\r\n  $ chmod a+x run.py\r\n  $ python run.py\r\n```\r\n\r\nDo not forget to configure and run your coins server daemon first\r\n\r\n```\r\n  $ nano ~/.bitcoin/bitcoin.conf\r\n  $ ./bitcoind\r\n```\r\n\r\nIf you wanna run the server with your own config file you should have to create a config file first and try to load it, like that:\r\n\r\n```\r\n  $ export MADCOIN_CONFIG=\"/path/to/settings.py\"\r\n  $ python run.py\r\n```\r\n\r\n\r\nHow to use it\r\n=============\r\n\r\n#### In production\r\n\r\nWe are gonna use uWSGI to deploy our app and that's should be enought to know, you only need to access to the server address on the config port as:\r\n\r\n```\r\n    SERVER_URL:5000/getinfo\r\n```\r\n\r\n#### In development\r\n\r\nAs we are still developing this proyect you have to add to your \"/etc/hosts\" file the following entries\r\n\r\n```\r\nSERVER_IP_ADDRESS bitcoin.mad.local\r\nSERVER_IP_ADDRESS litecoin.mad.local\r\n```\r\n\r\nThen if we wanna check the info of our coin server:\r\n\r\n```\r\nhttp://bitcoin.mad.local:5000/getinfo\r\n```\r\n\r\n#####If we are not using `werkzeug.wsgi` wWSGI development server (only for development porpuse):\r\n\r\nWe only have to connect ones to be able to access to the server, in the `debug mode` we can find anoying that the server is gonna reload each time we made a change that's means that we have to connect each time to the server, we can change this behavior with the following line inside the `run.py` file:\r\n\r\n```\r\napp.run(debug=True, host='0.0.0.0', use_reloader=False)\r\n\r\n```\r\n\r\nInstead of\r\n\r\n```\r\napp.run(debug=True, host='0.0.0.0')\r\n```\r\n\r\nTesting it\r\n==========\r\n\r\nIf you wanna test our code you have to have the server running and runs as well the file test.py\r\n\r\n```\r\n  $ python test.py\r\n```\r\n\r\nContributing\r\n============\r\n\r\nIf you are interested in improve the code or fix some bug, your welcome just keep in mind one rule the code below was written following the `PEP8` style guide for Python code.\r\n\r\nGenerating documentation\r\n========================\r\n\r\nThere are a config file `epydoc.conf` for generate the documentation using `epydoc`\r\n\r\nWith the following code we generate our documentation in the `apidocs` folder\r\n\r\nTo generate the documentation you should have all our project dependencies installed in the main system because a bug between virtualenv and epydoc\r\n\r\n```\r\n  $ epydoc --config epydoc.conf\r\n```\r\n\r\nErrors Codes\r\n============\r\n\r\n* 1000 - OK (no error)\r\n* 1001 - The address that you provided is invalid\r\n* 1002 - Account does not have enough funds available\r\n* 1003 - Address provided was not found\r\n\r\nResources\r\n=========\r\n\r\n* http://flask.pocoo.org/\r\n* http://www.virtualenv.org/\r\n* https://github.com/laanwj/bitcoin-python","google":"UA-5880186-14","note":"Don't delete this file! It's used internally to help with page regeneration."}